#!/usr/bin/env python3

import colorsys
import imaplib
import json
import math
from multiprocessing.dummy import Pool as ThreadPool
from typing import Tuple

# Make a `mailsconf.py` file in the same directory as this script
# For some things like GMail, you will need to do some more steps
#    - Go here https://myaccount.google.com/security
#    - Enable 2FA if not already
#    - Generate an app password for your account
#    - Use this instead of your normal password
# Expected structure
# CONFIG: { server: str, nickname: str, email: str, password: str, color: str, link: str }[]
from mailsconf import CONFIG


def to_hex(col: Tuple[int, int, int]) -> str:
    """Converts a color tuple to a hex string."""
    return f"#{min(col[0],255):02x}{min(col[1],255):02x}{min(col[2],255):02x}"


def from_hex(col: str) -> Tuple[int, int, int]:
    """Converts a hex string to a color tuple."""
    return (int(col[1:3], 16), int(col[3:5], 16), int(col[5:7], 16))


def brighten_color(color: str) -> str:
    """Brightens up a color."""
    colorrgb = from_hex(color)
    colorhls = colorsys.rgb_to_hls(
        colorrgb[0] / 255, colorrgb[1] / 255, colorrgb[2] / 255
    )
    # increase the brightness and saturation
    colorhls = colorsys.hls_to_rgb(
        colorhls[0],
        (1 / 3) + (2 / 3) * math.exp(colorhls[1] - 1),
        (2 / 3) * math.exp(colorhls[2] - 1),
    )
    return to_hex(
        (
            math.floor(colorhls[0] * 255),
            math.floor(colorhls[1] * 255),
            math.floor(colorhls[2] * 255),
        )
    )


def fetch_mail(mail):
    with imaplib.IMAP4_SSL(mail["server"], 993) as client:
        try:
            client.login(mail["email"], mail["password"])
        except imaplib.IMAP4.error:
            return {"name": mail["nickname"], "color": mail["color"], "unread": "E"}
        client.select()
        unread = len(client.search(None, "UnSeen")[1][0].split())

        return {
            "name": mail["nickname"],
            "color": mail["color"],
            "lcolor": brighten_color(mail["color"]),
            "unread": unread,
            "link": mail["link"],
        }


pool = ThreadPool(len(CONFIG))
results = pool.map(fetch_mail, CONFIG)

print(json.dumps(results))
