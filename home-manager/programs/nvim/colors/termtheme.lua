local function set(name, args)
	vim.api.nvim_set_hl(0, name, args)
end

vim.cmd("highlight clear")
vim.cmd("syntax reset")

local colors = require("colors")
set("Normal", { bg = "none", fg = colors.fg })
set("NonText", { bg = "none", fg = "none" })
set("Cursor", { bg = colors.fg, fg = colors.bg })
set("CursorLine", { bg = colors.bg_tertiary })
set("LineNr", { fg = colors.grey, italic = true })
set("CursorLineNr", { fg = colors.fg, bold = true })
set("ColorColumn", { bg = colors.bg_secondary }) -- the bar indicating 80/120 chars
set("StatusLine", { bg = "none", fg = colors.fg }) -- this is overridden by lualine but used sometimes
set("Directory", { fg = colors.light_blue })
set("Visual", { bg = colors.bg_tertiary })
set("Search", { bg = colors.yellow, fg = colors.bg, bold = true })
set("CurSearch", { bg = colors.accent, fg = colors.bg, bold = true })
set("MatchParen", { bg = colors.bg_tertiary, fg = colors.fg, underline = true })
set("Pmenu", { bg = "none", fg = colors.fg })
set("PmenuSel", { link = "CurSearch" })
set("PmenuSbar", { bg = colors.bg_secondary, fg = colors.grey })
set("VertSplit", { fg = colors.border })
set("NormalFloat", { bg = "none", fg = colors.fg })
set("WinSeparator", { bg = "none", fg = colors.border })
set("FloatBorder", { link = "WinSeparator" })
set("Title", { fg = colors.fg, bold = true })
set("Added", { fg = colors.lime })
set("Changed", { fg = colors.yellow })
set("Removed", { fg = colors.pink })
set("Error", { bg = colors.red, bold = true })

set("DiagnosticHint", { fg = colors.light_blue })
set("DiagnosticInfo", { fg = colors.cyan })
set("DiagnosticOk", { fg = colors.lime })
set("DiagnosticWarn", { fg = colors.orange })
set("DiagnosticError", { fg = colors.pink })
set("DiagnosticUnderlineHint", { sp = colors.light_blue, undercurl = true })
set("DiagnosticUnderlineInfo", { sp = colors.cyan, undercurl = true })
set("DiagnosticUnderlineOk", { sp = colors.lime, undercurl = true })
set("DiagnosticUnderlineWarn", { sp = colors.orange, undercurl = true })
set("DiagnosticUnderlineError", { sp = colors.pink, undercurl = true })
set("DiagnosticUnnecessary", { fg = colors.light_grey, sp = colors.light_grey, underdotted = true })

set("SnacksIndent", { fg = colors.bg_secondary })
set("SnacksIndentScope", { fg = colors.dark_grey })
set("SnacksPickerInputBorder", { fg = colors.border_active })
set("SnacksPickerIcon", { link = "SnacksPickerInputBorder" })
set("SnacksPickerPrompt", { link = "Title" })
set("SnacksPickerFile", { fg = colors.fg_secondary })
set("SnacksPickerGitStatusModified", { link = "Changed" })

set("NoiceCmdlinePopupBorder", { fg = colors.accent })
set("NoiceCmdlineIcon", { link = "SnacksPickerInputBorder" })

set("MiniIconsRed", { fg = colors.pink })
set("MiniIconsOrange", { fg = colors.orange })
set("MiniIconsYellow", { fg = colors.yellow })
set("MiniIconsGreen", { fg = colors.lime })
set("MiniIconsCyan", { fg = colors.cyan })
set("MiniIconsBlue", { fg = colors.dark_blue })
set("MiniIconsAzure", { fg = colors.light_blue })
set("MiniIconsPurple", { fg = colors.light_magenta })
set("MiniIconsGrey", { fg = colors.light_grey })

set("Comment", { fg = colors.light_grey, italic = true })
set("@comment.documentation", { fg = colors.green, italic = true })
set("Delimiter", { fg = colors.fg })
set("@tag.delimiter", { link = "Delimiter" })
set("@punctuation.special", { fg = colors.yellow })
set("@constructor.lua", { link = "Delimiter" })
set("Constant", { fg = colors.orange })
set("@constant.builtin", { link = "Constant" })
set("Keyword", { fg = colors.light_magenta, italic = true })
set("@tag.blade", { link = "Keyword" })
set("@tag", { fg = colors.pink })
set("String", { fg = colors.lime })
set("Identifier", { fg = colors.cyan })
set("@variable", { link = "Identifier" })
set("@variable.member", { link = "Identifier" })
set("Function", { fg = colors.dark_blue })
set("@module", { fg = colors.dark_cyan })
set("Type", { fg = colors.orange })
set("@type.builtin", { fg = colors.orange, italic = true })
set("@tag.attribute", { fg = colors.orange, italic = true })
set("Special", { fg = colors.cyan })
set("PreProc", { fg = colors.dark_blue, italic = true })
