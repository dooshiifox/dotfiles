(include "eww.music.yuck")
(include "eww.audio.yuck")
(include "eww.wifi.yuck")
(include "eww.brightness.yuck")
(include "eww.power.yuck")
(include "eww.notifications.yuck")

(deflisten workspace
  :initial "{\"app\":{\"title\":\"\",\"icon\":\"\"},\"workspaces\":[[],1,[{\"id\":2,\"open\":false},{\"id\":3,\"open\":false},{\"id\":4,\"open\":false},{\"id\":5,\"open\":false},{\"id\":6,\"open\":false},{\"id\":7,\"open\":false},{\"id\":8,\"open\":false},{\"id\":9,\"open\":false},{\"id\":0,\"open\":false}]]}"
  "$NIX_SRC/scripts/system/workspace"
)
(deflisten music
  :initial "{\"artist\":\"...\",\"album\":\"...\",\"title\":\"...\",\"duration\":0.0,\"duration_str\":\"0:00\",\"status\":\"stopped\",\"shuffle\":false,\"loop\":\"None\"}"
  "$NIX_SRC/scripts/music/data"
)
(deflisten music-volume
  :initial "0"
  "playerctl -p \'$(playerctl -l | grep \"mpd.instance\" | head -n 1)\' -F metadata -f \"{{ volume * 100 }}\""
)
(deflisten music-progress
  :initial "{\"position\":0,\"position_str\":\"0:00\",\"remaining\":0,\"remaining_str\":\"0:00\"}"
  "playerctl -p \"$(playerctl -l | grep \"mpd.instance\" | head -n 1)\" -F metadata -f '{\"position\":{{ position / 1000000 }},\"position_str\":\"{{ duration(position) }}\",\"remaining\":{{ (mpris:length - position) / 1000000 }},\"remaining_str\":\"{{ duration(mpris:length - position) }}\"}'"
)
(deflisten music-cover
  :initial "{\"cols\":[\"#CDB1F8\", \"#A2BBF6\"],\"file\":\"\"}"
  "$NIX_SRC/scripts/music/cover"
)
(deflisten music-rating
  :initial "{\"rating\":0,\"base_bias\":1}"
  "$NIX_SRC/scripts/music/rating"
)
; (deflisten appname
  ;   :initial "{\"title\":\"\",\"icon\":\"\"}"
  ;   "$NIX_SRC/appname"
; )
(defpoll face-path
  :interval "999999999999s"
  :initial "1"
  `realpath ~/.face`
)
(defpoll datetime
  :initial "{\"wday\":\"...\",\"yrnum\":1970,\"monum\":1,\"mo\":\"...\",\"day\":\"...\",\"daynum\":1,\"hr\":\"...\",\"min\":\"...\",\"sec\":\"...\"}"
  :interval "1s"
  `date '+{"wday":"%a","yrnum":%Y,"monum":%-m,"mo":"%b","day":"%d","daynum":%-d,"hr":"%H","min":"%M","sec":"%S"}'`
)
(defpoll month
  :interval "999999999999s"
  :initial "1"
  `date +'%-m'`
)
(defpoll year
  :interval "999999999999s"
  :initial "1970"
  `date +'%Y'`
)
(defpoll weeks
  :interval "999999999999s"
  :initial "[[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1]]"
  `$NIX_SRC/scripts/system/calendar current`
)
(defpoll weather_info
  :interval "15m"
  :initial "{\"temp\":\"??\",\"feels_like\":\"??\",\"high\":\"??\",\"low\":\"??\",\"sunrise\":\"\",\"sunset\":\"\",\"desc\":\"...\",\"city\":\"...\",\"icon\":\"?\",\"icon_code\":\"\",\"hex\":\"#adadff\",\"quote_1\":\"Loading in!!!\",\"quote_2\":\"Just wait a moment...\"} "
  `$NIX_SRC/scripts/local/weather`
)
(defpoll battery
  :initial "{\"level\":0,\"perc\":\"0\",\"time\":\"-\",\"charging\":\"n\"}"
  :interval "1s"
  "$NIX_SRC/scripts/system/battery"
)
(defpoll volume
  :initial "{\"level\":0,\"perc\":\"0\",\"mute\":true}"
  :interval "1s"
  "$NIX_SRC/scripts/system/volume"
)
(defpoll wifi
  :initial "{\"online\":false}"
  :interval "15s"
  "$NIX_SRC/scripts/system/wifi"
)
(defpoll brightness
  :initial "{\"perc\":0,\"level\":0}"
  :interval "1s"
  "$NIX_SRC/scripts/system/brightness --get"
)
(defpoll NIX_SRC
  :initial ""
  :interval "10s"
  "echo $NIX_SRC"
)
(defvar mails '[]')
(defvar mail-loading false)
(defvar ws-open false)
(defvar icon-open false)
(defvar ws-priority false)
(defvar battery-shows 0)
(defvar volume-shows 0)
(defvar bright-shows 0)

(defwindow bar
  :monitor 0
  :geometry (
    geometry
    ;; :x "10px"
    :x "0px"
    :y "4px"
    :width "1900px"
    :height "32px"
    :anchor "top center"
  )
  :reserve (struts :distance "40px" :side "top")
  :exclusive true
  :focusable false
  (centerbox :orientation "horizontal"
    :halign "center"
    :valign "center"
    :vexpand false
    :hexpand false
    (left)
    (center)
    (right)
  )
)



;;;;;;;;;;;;;;;;;;;;
;;   UTIL MODULES   ;;
;;;;;;;;;;;;;;;;;;;;
(defwidget space []
  (box :orientation "h" :space-evenly false :hexpand true)
)



;;;;;;;;;;;;;;;;;;;;
;;   LEFT MODULES   ;;
;;;;;;;;;;;;;;;;;;;;
(defwidget left []
  (box
    :orientation "h"
    :space-evenly false
    :spacing 20
    :halign "start"
    :class "module left"
    (workspaces)
    (active-app)
  )
)

(defwidget workspaces []
  (box :class "works ${ws-open && ws-priority ? 'active' : 'inactive'}"	:orientation "h" :space-evenly false
    (revealer :transition "slideleft" :duration "0.2s" :reveal {ws-open && ws-priority}
      (box :orientation "h" :space-evenly "false"
        (button :onclick "${EWW_CMD} update ws-open=false; ${EWW_CMD} update ws-priority=false" :class "ws-btn wsclose"
          (label :text "x")
        )
        (for entry in {workspace.workspaces[0]}
          (button :onclick "$NIX_SRC/scripts/system/workspace_move ${entry.id}" :class "ws-btn ws${entry.id} ws-${entry.open ? 'occupied' : ''}" {entry.id})
        )
      )
    )
    (button
      :onclick {ws-open && ws-priority ? "$NIX_SRC/scripts/system/workspace_move ${workspace.workspaces[1]}" : "${EWW_CMD} update ws-open=true; ${EWW_CMD} update ws-priority=true"}
      :class "ws-btn ws${workspace.workspaces[1]} ws-focus"
      "${workspace.workspaces[1]}"
    )
    (revealer :transition "slideright" :duration "0.2s" :reveal {ws-open && ws-priority}
      (box :orientation "h" :space-evenly "false"
        (for entry in {workspace.workspaces[2]}
          (button :onclick "$NIX_SRC/scripts/system/workspace_move ${entry.id}" :class "ws-btn ws${entry.id} ws-${entry.open ? 'occupied' : ''}" {entry.id})
        )
      )
    )
  )
)

(defwidget active-app []
  (box :class "active-app" :orientation "h" :halign "start" :space-evenly false
    (button :onclick {icon-open && !ws-priority ? "${EWW_CMD} update icon-open=false; ${EWW_CMD} update ws-priority=false; ${EWW_CMD} update ws-open=false" : "${EWW_CMD} update icon-open=true; ${EWW_CMD} update ws-priority=false"}
      (box :valign "start" :width 20 :height 20 :class "${workspace.app.icon ? '' : 'rounded-md'} bg-cover" :style "background-image: url('${workspace.app.icon ?: face-path}'); background-position: 50% 50%")
    )
    (revealer :transition "slideright" :duration "0.2s" :reveal {icon-open && !ws-priority}
      (label :class "app-name" :limit-width "35" :text {workspace.app.title ?: "-"} :tooltip {workspace.app.title ?: "-"})
    )
  )
)


;;;;;;;;;;;;;;;;;;;;;;
;;   CENTER MODULES   ;;
;;;;;;;;;;;;;;;;;;;;;;
(defwidget center []
  (box
    :orientation "h"
    :space-evenly false
    :halign "center"
    :class "module center"
    (space)
    (music)
    (space)
  )
)

(defwidget music []
  (box
    :style "background-image: linear-gradient(45deg, ${music-cover.cols[0]}, ${music-cover.cols[1]})"
    :class "music rounded-xl min-h-6"
    :orientation "h"
    :space-evenly false
    (button
      :class "music-box rounded-xl animate-bg hover:bg-white|40 p-0.5"
      :valign "center"
      :onclick "$NIX_SRC/scripts/system/open-eww-overlay music-overlay"
      :onmiddleclick "playerctl -p \"$(playerctl -l | grep \"mpd.instance\" | head -n 1)\" play-pause"
      :onrightclick "playerctl -p \"$(playerctl -l | grep \"mpd.instance\" | head -n 1)\" play-pause"
      (box :class "music-inner"
        :orientation "h"
        :space-evenly false
        :valign "center"
        (box :class "music-play" :style "background-image: url('${music.status == 'playing' ? 'assets/pause-button.png' : 'assets/play-button.png'}');")
        (label :valign "center" :limit-width 40 :class "music-title" :text {music.title ?: "???"})
        (label :valign "center" :limit-width 30 :class "music-artist" :text {music.artist ?: "???"})
      )
    )
  )
)



;;;;;;;;;;;;;;;;;;;;;
;;   RIGHT MODULES   ;;
;;;;;;;;;;;;;;;;;;;;;
(defwidget right []
  (box
    :orientation "h"
    :space-evenly false
    :class "module right"
    :spacing 12
    (space)
    (stats)
    (datetime)
    (power_timeweather)
  )
)

(defwidget stats []
  (box :class "stats" :orientation "h" :space-evenly false
    (battery)
    (sep)
    (volume)
    (sep)
    (wifi)
    (sep)
    (brightness)
  )
)
(defwidget sep [] (box :class "sep" :orientation "h" :space-evenly false))
(defwidget battery []
  (button
    :class "animate-bg hover:bg-white|20 px-2 rounded-md"
    :onclick "${EWW_CMD} update battery-shows=${battery-shows == 0 ? 1 : battery-shows == 1 ? 2 : 1}"
    :onrightclick "${EWW_CMD} update battery-shows=${battery-shows == 0 ? 1 : 0}"
    :onmiddleclick "${EWW_CMD} update battery-shows=${battery-shows == 0 ? 1 : 0}"
    (box :class "battery charging-${battery.charging} ${battery-shows == 0 ? 'subtle' : ''} level-${battery.level >= 9 ? 'full' : battery.level > 4 ? 'ok' : battery.level > 2 ? 'warn' : 'low'}" :orientation "h" :space-evenly false
      (revealer :transition "slideleft" :duration "0.2s" :reveal {battery-shows == 2}
        (label :class "text-xs font-mono pr-1.5 pt-0.5 font-medium" :text "${battery.time != 'null' && battery.time != "" ? battery.time : (battery.charging == 'm' ? '-' : battery.level > 9 ? 'Full' : '??')}")
      )
      (label :class "battery-icon font-icon" :text {["󰂎", "󰁺", "", "󰁼", "󰁽", "󰁾", "󰁿", "󰂀", "󰂁", "󰂂", "󰁹"][battery.level]})
      (revealer :transition "slideright" :duration "0.2s" :reveal {battery-shows == 1}
        (label :class "text-xs font-mono pl-1.5 pt-0.5 font-medium" :text "${battery.perc}%")
      )
    )
  )
)
(defwidget volume []
  (button
    :class "animate-bg hover:bg-white|20 px-2 rounded-md"
    :onclick "$NIX_SRC/scripts/system/open-eww-overlay audio-overlay"
    :onrightclick "${EWW_CMD} update volume-shows=${volume-shows == 0 ? 1 : 0}"
    :onmiddleclick "${EWW_CMD} update volume-shows=${volume-shows == 0 ? 1 : 0}"
    (box :class {volume.mute ? "text-gray-600" : "text-gray-300"} :orientation "h" :space-evenly false
      ; (button :class "volume-icon" :onclick "pamixer -t"
        (label :width 15 :class "mt-px font-icon" :text {volume.mute ? "" : ["", "", ""][volume.level]})
      ; )
      (revealer :transition "slideright" :duration "0.2s" :reveal {volume-shows == 1}
        (label :width 35 :class "text-xs font-mono pl-1.5 pt-0.5 font-medium" :text {volume.mute ? "M" : "${volume.perc}%"})
      )
    )
  )
)
(defwidget wifi []
  (button :class "animate-bg hover:bg-white|20 px-2 rounded-md" :onclick "$NIX_SRC/scripts/system/open-eww-overlay wifi-overlay"
    (box :class "${wifi.online ? 'text-gray-300' : 'text-gray-600'} font-icon" :orientation "h" :space-evenly false
      (label :text "")
    )
  )
)
(defwidget brightness []
  (button
    :class "animate-bg hover:bg-white|20 px-2 rounded-md"
    :onclick "$NIX_SRC/scripts/system/open-eww-overlay brightness-overlay"
    :onrightclick "${EWW_CMD} update bright-shows=${bright-shows == 0 ? 1 : 0}"
    :onmiddleclick "${EWW_CMD} update bright-shows=${bright-shows == 0 ? 1 : 0}"
    (box :class "text-gray-300" :orientation "h" :space-evenly false
      (label :class "font-icon" :text {["󰃞", "󰃟", "󰃠"][brightness.level]})
      (revealer :transition "slideright" :duration "0.2s" :reveal {bright-shows == 1}
        (label :width 35 :class "text-xs font-mono pl-1.5 pt-0.5 font-medium" :text "${brightness.perc}%")
      )
    )
  )
)

(defwidget datetime []
  (box :class "datetime" :orientation "h" :space-evenly false
    (box :class "date-wrap" :orientation "h" :space-evenly false
      (label :class "date-wday" :text "${datetime.wday}")
      (label :class "date-dm" :text "${datetime.day} ${datetime.mo}")
    )
    (box :class "clock-wrap" :orientation "h" :space-evenly false
      (label :class "clock" :text "${datetime.hr}:${datetime.min}")
    )
  )
)

(defwidget power_timeweather []
  (box :class "power_timeweather" :orientation "h" :space-evenly false
    (timeweather)
    (power)
  )
)
(defwidget power []
  (button :class "power" :onclick "$NIX_SRC/scripts/system/open-eww-overlay power-overlay"
    (label :class "font-icon" :text "")
  )
)
(defwidget timeweather []
  (button :class "timeweather" :onclick "$NIX_SRC/scripts/system/open-eww-overlay notifications-overlay"
    (label :class "font-icon" :text "")
  )
)
